/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>exo.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\61\1\62\1\62\1\61\22\0\1\61\1\0\1\7"+
    "\11\0\1\3\1\53\1\1\1\0\2\51\1\54\1\55\2\52\4\13"+
    "\1\2\2\0\1\6\3\0\1\45\1\14\1\10\1\41\1\47\1\60"+
    "\1\14\1\50\1\44\1\37\1\14\1\17\1\36\1\43\1\14\1\16"+
    "\1\14\1\46\1\11\1\14\1\42\1\40\4\14\4\0\1\12\1\0"+
    "\1\26\1\15\1\31\1\23\1\30\2\15\1\35\1\24\1\32\1\15"+
    "\1\20\1\25\1\22\1\15\1\57\1\15\1\27\1\34\1\56\1\21"+
    "\1\33\4\15\1\4\1\0\1\5\7\0\1\62\u1fa2\0\1\62\1\62"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\11\1\1\1\11\1\12\2\11\7\12\5\11"+
    "\2\1\2\12\1\11\1\13\1\0\1\11\2\0\1\11"+
    "\1\0\10\12\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\2\12\1\11\1\0\1\11"+
    "\4\0\1\11\1\0\7\12\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\2\12\1\14\4\0\1\11"+
    "\1\0\5\12\1\11\1\0\1\11\1\0\1\11\3\0"+
    "\2\12\1\0\1\15\3\16\2\12\1\17\1\11\1\0"+
    "\1\11\2\12\1\0\2\15\2\12\1\11\1\0\1\11"+
    "\2\12\1\0\2\12\1\11\1\0\1\11\1\12\1\0"+
    "\1\12\1\11\1\12\1\0\1\20\1\21\1\12\1\22"+
    "\2\12\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165\0\u0198"+
    "\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330"+
    "\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8"+
    "\0\u04fb\0\63\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d"+
    "\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5"+
    "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\u09f6\0\314\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\377\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef"+
    "\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f"+
    "\0\u1452\0\377\0\63\0\u0132\0\u1485\0\u14b8\0\u0132\0\u14eb"+
    "\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\63\0\u161d\0\u1650"+
    "\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8"+
    "\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980"+
    "\0\u19b3\0\u19e6\0\u0132\0\377\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2"+
    "\0\u0132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\2\16\1\22\1\16\1\23\1\24\3\16\1\25"+
    "\1\26\1\27\1\16\1\30\1\31\1\32\1\33\3\15"+
    "\1\34\3\15\1\35\1\14\1\2\1\36\1\14\1\37"+
    "\1\40\1\41\1\42\75\0\1\43\3\0\1\15\2\0"+
    "\16\15\20\0\2\15\20\0\1\15\2\0\6\15\1\44"+
    "\7\15\7\0\1\45\10\0\2\15\40\0\1\46\42\0"+
    "\1\15\2\0\16\15\20\0\2\15\20\0\1\16\2\0"+
    "\16\16\20\0\2\16\20\0\1\15\1\0\1\43\16\15"+
    "\20\0\2\15\20\0\1\15\2\0\1\15\1\47\14\15"+
    "\4\0\1\50\13\0\2\15\20\0\1\16\2\0\1\16"+
    "\1\51\14\16\20\0\2\16\20\0\1\16\2\0\4\16"+
    "\1\52\11\16\20\0\2\16\20\0\1\16\2\0\6\16"+
    "\1\53\1\16\1\54\5\16\20\0\2\16\20\0\1\16"+
    "\2\0\2\16\1\55\13\16\20\0\2\16\20\0\1\16"+
    "\2\0\10\16\1\56\5\16\20\0\2\16\20\0\1\16"+
    "\2\0\10\16\1\57\5\16\20\0\2\16\20\0\1\16"+
    "\2\0\6\16\1\60\7\16\20\0\2\16\20\0\1\15"+
    "\2\0\6\15\1\61\1\15\1\62\5\15\7\0\1\63"+
    "\1\0\1\64\6\0\2\15\20\0\1\15\2\0\10\15"+
    "\1\65\5\15\11\0\1\66\6\0\2\15\20\0\1\15"+
    "\2\0\10\15\1\67\5\15\11\0\1\70\6\0\2\15"+
    "\20\0\1\15\2\0\4\15\1\71\11\15\6\0\1\72"+
    "\11\0\2\15\20\0\1\15\2\0\11\15\1\73\4\15"+
    "\20\0\2\15\16\0\1\74\21\0\1\46\13\0\2\74"+
    "\1\0\2\74\42\0\1\46\13\0\1\75\2\0\2\75"+
    "\22\0\1\16\2\0\10\16\1\76\5\16\20\0\2\16"+
    "\20\0\1\16\2\0\6\16\1\77\7\16\20\0\2\16"+
    "\20\0\1\15\2\0\4\15\1\100\11\15\20\0\2\15"+
    "\15\0\1\101\65\0\1\15\2\0\5\15\1\102\10\15"+
    "\20\0\2\15\41\0\1\103\37\0\1\104\35\0\2\105"+
    "\1\106\2\105\22\0\1\15\2\0\2\15\1\107\13\15"+
    "\20\0\2\15\46\0\1\110\34\0\1\16\2\0\2\16"+
    "\1\111\13\16\20\0\2\16\20\0\1\16\2\0\5\16"+
    "\1\112\10\16\20\0\2\16\20\0\1\16\2\0\7\16"+
    "\1\111\6\16\20\0\2\16\20\0\1\16\2\0\7\16"+
    "\1\113\6\16\20\0\2\16\20\0\1\16\2\0\4\16"+
    "\1\114\11\16\20\0\2\16\20\0\1\16\2\0\1\16"+
    "\1\111\14\16\20\0\2\16\20\0\1\16\2\0\2\16"+
    "\1\115\13\16\20\0\2\16\20\0\1\16\2\0\1\116"+
    "\4\16\1\117\10\16\20\0\2\16\20\0\1\15\2\0"+
    "\7\15\1\107\6\15\20\0\2\15\20\0\1\15\2\0"+
    "\7\15\1\120\6\15\20\0\2\15\51\0\1\110\62\0"+
    "\1\121\31\0\1\15\2\0\1\15\1\107\14\15\20\0"+
    "\2\15\45\0\1\110\35\0\1\15\2\0\2\15\1\122"+
    "\13\15\20\0\2\15\46\0\1\123\34\0\1\15\2\0"+
    "\5\15\1\124\10\15\20\0\2\15\41\0\1\125\41\0"+
    "\1\15\2\0\16\15\20\0\1\126\1\15\40\0\1\127"+
    "\42\0\1\16\2\0\7\16\1\130\6\16\20\0\2\16"+
    "\20\0\1\16\2\0\7\16\1\131\6\16\20\0\2\16"+
    "\20\0\1\15\2\0\2\15\1\132\13\15\20\0\2\15"+
    "\16\0\1\133\35\0\2\133\1\0\2\133\22\0\1\15"+
    "\2\0\10\15\1\107\5\15\20\0\2\15\52\0\1\110"+
    "\66\0\1\106\22\0\1\104\35\0\2\104\1\106\2\104"+
    "\20\0\1\134\35\0\1\135\1\134\1\0\1\136\1\134"+
    "\22\0\1\15\2\0\3\15\1\137\12\15\20\0\2\15"+
    "\44\0\1\140\36\0\1\16\2\0\3\16\1\141\12\16"+
    "\20\0\2\16\20\0\1\16\2\0\6\16\1\142\7\16"+
    "\20\0\2\16\20\0\1\16\2\0\11\16\1\143\4\16"+
    "\20\0\2\16\20\0\1\16\2\0\5\16\1\144\10\16"+
    "\20\0\2\16\20\0\1\16\2\0\3\16\1\143\12\16"+
    "\20\0\2\16\20\0\1\16\2\0\1\145\15\16\20\0"+
    "\2\16\20\0\1\16\2\0\10\16\1\111\5\16\20\0"+
    "\2\16\20\0\1\15\2\0\11\15\1\146\4\15\20\0"+
    "\2\15\13\0\1\147\67\0\1\15\2\0\3\15\1\146"+
    "\12\15\20\0\2\15\44\0\1\147\36\0\1\15\2\0"+
    "\6\15\1\150\7\15\20\0\2\15\50\0\1\151\32\0"+
    "\1\15\2\0\4\15\1\152\11\15\20\0\2\15\16\0"+
    "\1\153\35\0\2\154\1\155\2\154\22\0\1\16\2\0"+
    "\7\16\1\156\6\16\20\0\2\16\20\0\1\16\2\0"+
    "\16\16\20\0\1\157\1\16\16\0\1\160\35\0\2\160"+
    "\1\0\2\160\42\0\1\161\40\0\1\134\21\0\1\161"+
    "\13\0\2\134\1\0\2\134\42\0\1\161\13\0\1\134"+
    "\2\0\2\134\22\0\1\15\2\0\4\15\1\162\11\15"+
    "\20\0\2\15\47\0\1\163\33\0\1\16\2\0\4\16"+
    "\1\164\11\16\20\0\2\16\20\0\1\16\2\0\2\16"+
    "\1\165\13\16\20\0\2\16\20\0\1\16\2\0\7\16"+
    "\1\117\6\16\20\0\2\16\20\0\1\16\2\0\6\16"+
    "\1\166\7\16\20\0\2\16\20\0\1\16\2\0\10\16"+
    "\1\167\5\16\20\0\2\16\20\0\1\15\2\0\7\15"+
    "\1\102\6\15\20\0\2\15\51\0\1\103\31\0\1\15"+
    "\2\0\2\15\1\170\13\15\20\0\2\15\46\0\1\171"+
    "\34\0\1\15\2\0\13\15\1\172\2\15\20\0\2\15"+
    "\56\0\1\155\22\0\1\153\35\0\2\153\1\155\2\153"+
    "\56\0\1\134\2\0\1\136\1\134\22\0\1\16\2\0"+
    "\6\16\1\173\7\16\20\0\2\16\20\0\1\16\2\0"+
    "\4\16\1\174\11\16\20\0\2\16\16\0\1\175\35\0"+
    "\2\175\1\0\2\175\20\0\1\176\35\0\2\177\1\0"+
    "\2\177\22\0\1\16\2\0\11\16\1\200\4\16\20\0"+
    "\2\16\20\0\1\16\2\0\16\16\20\0\1\201\1\16"+
    "\20\0\1\15\2\0\11\15\1\202\4\15\20\0\2\15"+
    "\13\0\1\203\67\0\1\15\2\0\4\15\1\204\11\15"+
    "\20\0\2\15\20\0\1\16\2\0\4\16\1\205\11\16"+
    "\20\0\2\16\20\0\1\16\2\0\11\16\1\206\4\16"+
    "\20\0\2\16\16\0\1\207\35\0\2\207\1\0\2\207"+
    "\20\0\1\176\35\0\2\176\1\0\2\176\22\0\1\16"+
    "\2\0\15\16\1\210\20\0\2\16\20\0\1\16\2\0"+
    "\10\16\1\211\5\16\20\0\2\16\20\0\1\15\2\0"+
    "\15\15\1\212\20\0\2\15\53\0\1\213\27\0\1\15"+
    "\2\0\16\15\20\0\1\214\1\15\20\0\1\16\2\0"+
    "\2\16\1\167\13\16\20\0\2\16\20\0\1\16\2\0"+
    "\4\16\1\215\11\16\20\0\2\16\16\0\1\216\35\0"+
    "\2\216\1\0\2\216\22\0\1\16\2\0\10\16\1\164"+
    "\5\16\20\0\2\16\20\0\1\16\2\0\1\16\1\217"+
    "\14\16\20\0\2\16\20\0\1\15\2\0\10\15\1\162"+
    "\5\15\20\0\2\15\52\0\1\163\30\0\1\15\2\0"+
    "\10\15\1\220\5\15\20\0\2\15\20\0\1\16\2\0"+
    "\16\16\20\0\1\16\1\221\15\0\1\222\65\0\1\16"+
    "\2\0\7\16\1\223\6\16\20\0\2\16\20\0\1\15"+
    "\2\0\14\15\1\224\1\15\20\0\2\15\20\0\1\16"+
    "\2\0\6\16\1\225\7\16\20\0\2\16\13\0\2\226"+
    "\2\0\35\226\5\0\3\226\17\0\1\16\2\0\2\16"+
    "\1\227\13\16\20\0\2\16\20\0\1\226\2\0\16\226"+
    "\20\0\2\226\20\0\1\16\2\0\16\16\20\0\1\230"+
    "\1\16\20\0\1\16\2\0\14\16\1\231\1\16\20\0"+
    "\2\16\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6885];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\10\11\30\1\1\11\1\0\1\1\2\0\1\1"+
    "\1\0\12\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\3\1\1\0\1\1\4\0\1\1"+
    "\1\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\4\0\1\1\1\0\6\1\1\0\1\1"+
    "\1\0\1\1\3\0\2\1\1\0\2\1\1\11\5\1"+
    "\1\0\3\1\1\0\1\11\4\1\1\0\3\1\1\0"+
    "\3\1\1\0\2\1\1\0\3\1\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caractère non reconnue "+yytext());
            } 
            // fall through
          case 20: break;
          case 2: 
            { return new Symbol(sym.POINT);
            } 
            // fall through
          case 21: break;
          case 3: 
            { return new Symbol(sym.DEUXPOINT);
            } 
            // fall through
          case 22: break;
          case 4: 
            { return new Symbol(sym.VIRG);
            } 
            // fall through
          case 23: break;
          case 5: 
            { return new Symbol(sym.ACCOVT);
            } 
            // fall through
          case 24: break;
          case 6: 
            { return new Symbol(sym.ACCFMT);
            } 
            // fall through
          case 25: break;
          case 7: 
            { return new Symbol(sym.EGALE);
            } 
            // fall through
          case 26: break;
          case 8: 
            { return new Symbol(sym.GUILL);
            } 
            // fall through
          case 27: break;
          case 9: 
            { return new Symbol(sym.NOMLIEU);
            } 
            // fall through
          case 28: break;
          case 10: 
            { return new Symbol(sym.CHAINE);
            } 
            // fall through
          case 29: break;
          case 11: 
            { 
            } 
            // fall through
          case 30: break;
          case 12: 
            { return new Symbol(sym.FIN);
            } 
            // fall through
          case 31: break;
          case 13: 
            { return new Symbol(sym.HORAIRE);
            } 
            // fall through
          case 32: break;
          case 14: 
            { return new Symbol(sym.JOUR);
            } 
            // fall through
          case 33: break;
          case 15: 
            { return new Symbol(sym.ASPECTLIEU, new String(yytext()));
            } 
            // fall through
          case 34: break;
          case 16: 
            { return new Symbol(sym.ANIMATEUR);
            } 
            // fall through
          case 35: break;
          case 17: 
            { return new Symbol(sym.ACTIVITES);
            } 
            // fall through
          case 36: break;
          case 18: 
            { return new Symbol(sym.CENTRE);
            } 
            // fall through
          case 37: break;
          case 19: 
            { return new Symbol(sym.PARTICIPANTS);
            } 
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
